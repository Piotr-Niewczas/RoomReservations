@page "/Account/Manage/Email"
@using RoomReservations.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.Text.Encodings.Web
@using System.ComponentModel.DataAnnotations

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject IdentityUserAccessor UserAccessor
@inject NavigationManager NavigationManager

<PageTitle>Zarządzaj mailem</PageTitle>

<h3>Zarządzaj mailem</h3>

<StatusMessage Message="@_message"/>
<div class="row">
    <div class="col-md-6">
        <form @onsubmit="OnSendEmailVerificationAsync" @formname="send-verification" id="send-verification-form" method="post">
            <AntiforgeryToken/>
        </form>
        <EditForm Model="Input" FormName="change-email" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            @if (_isEmailConfirmed)
            {
                <div class="form-floating mb-3 input-group">
                    <input type="text" value="@_email" class="form-control" placeholder="Wpisz swój mail." disabled />
                    <div class="input-group-append">
                        <span class="h-100 input-group-text text-success font-weight-bold">✓</span>
                    </div>
                    <label for="email" class="form-label">Email</label>
                </div>
            }
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.NewEmail" class="form-control" autocomplete="email" aria-required="true" placeholder="Wpisz nowy email."/>
                <label for="new-email" class="form-label">Nowy email</label>
                <ValidationMessage For="() => Input.NewEmail" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Zmień email</button>
        </EditForm>
    </div>
</div>

@code {
    private string? _message;
    private ApplicationUser _user = default!;
    private string? _email;
    private bool _isEmailConfirmed;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm(FormName = "change-email")]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _email = await UserManager.GetEmailAsync(_user);
        _isEmailConfirmed = await UserManager.IsEmailConfirmedAsync(_user);

        Input.NewEmail ??= _email;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.NewEmail is null || Input.NewEmail == _email)
        {
            _message = "Twój email nie został zmieniony.";
            return;
        }
    }

    private async Task OnSendEmailVerificationAsync()
    {
        if (_email is null)
        {
            return;
        }
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Pole jest wymagane.")]
        [EmailAddress(ErrorMessage = "Niepoprawny adres email.")]
        [Display(Name = "Nowy email")]
        public string? NewEmail { get; set; }
    }

}
