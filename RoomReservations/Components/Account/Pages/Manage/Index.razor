@page "/Account/Manage"
@using RoomReservations.Models
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager

<PageTitle>Konto</PageTitle>

<h3>Konto</h3>
<StatusMessage/>

<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="form-floating mb-3">
                <input type="text" value="@_username" class="form-control" placeholder="Wpisz swoją nazwę użytkownika." disabled/>
                <label for="username" class="form-label">Nazwa użytkownika</label>
            </div>
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Wpisz swój numer telefonu."/>
                <label for="phone-number" class="form-label">Numer telefonu</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger"/>
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Zapisz</button>
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser _user = default!;
    private string? _username;
    private string? _phoneNumber;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        _user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        _username = await UserManager.GetUserNameAsync(_user);
        _phoneNumber = await UserManager.GetPhoneNumberAsync(_user);

        Input.PhoneNumber ??= _phoneNumber;
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != _phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(_user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Błąd: Nie udało się ustawić numeru telefonu.", HttpContext);
            }
        }

        await SignInManager.RefreshSignInAsync(_user);
        RedirectManager.RedirectToCurrentPageWithStatus("Twoje konto zostało zaktualizowane", HttpContext);
    }

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }

}
