@page "/make-reservation"
@using RoomReservations.Models
@using RoomReservations.Data
@using Microsoft.AspNetCore.Authorization
@inject IAvailableRoomService AvailableRoomService
@inject IReservationService ReservationService
@inject SharedMethodsService SharedMethodsService
@inject NavigationManager NavigationManager
@inject ITransactionService TransactionService
@attribute [Authorize]

@rendermode InteractiveServer

<h3>Formularz tworzenia rezerwacji</h3>

<MudOverlay Visible="_isOverlayVisible" DarkBackground="true" Absolute="true">
    <MudPaper Class="pa-16 ma-2" Elevation="3">
        <MudText Typo="Typo.h2">@_overlayMessage</MudText>
        <br style="line-height: 3rem;"/>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ConfirmationOkClicked">Zobacz rezerwacje</MudButton>

        @if (_showPaymentDialog || _transactionId is not null)
        {
            <div style="padding-top: 4em;">
                <MudText Typo="Typo.h4">Zapłać wygodnie tutaj</MudText>

                <div style="padding-top: 1em">
                    <PaymentWindow TransactionIds="@( [_transactionId ?? -1])" Amount="_totalPrice"/>
                </div>
            </div>
        }

    </MudPaper>
</MudOverlay>

<MudGrid>
    <MudItem xs="12" md="6">
        <EditForm Model="@_reservation" OnSubmit="Submit" FormName="ReservationForm">
            <MudPaper Class="pa-8 ma-2">
                <MudDateRangePicker Label="Wybierz datę rezerwacji" DateRange="_dateRange"
                                    MinDate="@DateTime.Now.AddDays(-1)"
                                    DateRangeChanged="@(async value => { _dateRange = value; await DatesChanged(); })"
                                    IsDateDisabledFunc="@(IsDateAvailable)"
                                    PickerVariant="PickerVariant.Static" Orientation="Orientation.Landscape"/>
                <br/>
                <MudSelect T="int" Label="Wybierz pokój" Clearable="true" Value="@_selectedRoomId"
                           ValueChanged="@(value => { _selectedRoomId = value; StateHasChanged(); })">
                    @foreach (var room in _availableRoomsFromDb)
                    {
                        <MudSelectItem T="int" Value="@room.Id">@room.Name</MudSelectItem>
                    }
                </MudSelect>

                <div style="padding-top: 2em">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddSelectedRoom">Dodaj pokój</MudButton>
                </div>
            </MudPaper>
            <MudPaper Class="pa-8 ma-2">
                <MudText>Całkowita kwota rezerwacji: @_totalPrice zł</MudText>
                <div style="padding-top: 1em">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit" Disabled="DisableSubmit">Rezerwuj</MudButton>
                </div>
            </MudPaper>
            <Alert @ref="_alert"></Alert>
        </EditForm>
    </MudItem>
    <MudItem xs="12" md="6">
        <MudPaper Class="pa-8 ma-2">
            <MudText>Wybrane pokoje:</MudText>
            <MudSimpleTable Dense="true">
                <thead>
                <tr>
                    <th>
                        Nazwa
                    </th>
                    <th>
                        Cena za noc
                    </th>
                    <th>
                        Usuń
                    </th>
                </tr>
                </thead>
                <tbody>
                @foreach (var selectedRoom in _selectedRooms)
                {
                    <tr>
                        <td>
                            @selectedRoom.Name
                        </td>
                        <td>
                            @selectedRoom.PricePerNight zł
                        </td>
                        <td>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Secondary" OnClick="@(() => RemoveSelectedRoom(selectedRoom))"/>
                        </td>
                    </tr>
                }
                </tbody>
            </MudSimpleTable>
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    ApplicationUser? User { get; set; }
    [Parameter] public EventCallback HijackSubmit { get; set; }
    [Parameter] public bool DisableSubmit { get; set; }
    [Parameter] public string RedirectUrl { get; set; } = "/list-reservations";
    Reservation _reservation = new();
    List<Room> _availableRoomsFromDb = [];
    readonly List<Room> _selectedRooms = [];
    private DateRange _dateRange = new(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private int _selectedRoomId;

    private Alert _alert = new();

    private bool _isOverlayVisible;
    private string _overlayMessage = "Zapisywanie...";

    private decimal _totalPrice;
    private int? _transactionId;
    private bool _showPaymentDialog;

    private IEnumerable<Reservation>? _currentReservationsForRooms;

    protected override async Task OnInitializedAsync()
    {
        await ReloadAvailableRoomsAtDates();
    }

    private void AddSelectedRoom()
    {
        // Find the selected room by its ID
        var selectedRoom = _availableRoomsFromDb.FirstOrDefault(room => room.Id == _selectedRoomId);

        // Add the selected room to the reservation if it's not already added
        if (selectedRoom != null && !_selectedRooms.Contains(selectedRoom))
        {
            _availableRoomsFromDb.Remove(selectedRoom);
            _selectedRooms.Add(selectedRoom);
        }

        // Clear the selection
        _selectedRoomId = 0;
        RecalculateTotalPrice();
    }

    private async Task RemoveSelectedRoom(Room room)
    {
        _selectedRooms.Remove(room);
        await ReloadAvailableRoomsAtDates();
        RecalculateTotalPrice();
    }

    private async Task DatesChanged()
    {
        await ReloadAvailableRoomsAtDates();
        RecalculateTotalPrice();
    }

    private async Task ReloadAvailableRoomsAtDates()
    {
        var start = _dateRange.Start ?? DateTime.MinValue.Date;
        var end = _dateRange.End ?? DateTime.MaxValue.Date;
        _availableRoomsFromDb = (await AvailableRoomService.GetAvailableRoomsAsync(start, end)).Except(_selectedRooms).ToList();
    }

    public async void Submit(EditContext context)
    {
        if (HijackSubmit.HasDelegate)
        {
            await HijackSubmit.InvokeAsync(null);
            return;
        }

        if (User is null)
        {
            // Get the current user
            var (user, error) = await SharedMethodsService.GetCurrentUserAsync();
            if (user is null)
            {
                var msg = error == GetCurrentUserError.UserNotLoggedIn ? "Zaloguj się, aby dokonać rezerwacji" : "Wystąpił nieoczekiwany błąd";
                _alert.ShowAlert(Severity.Error, msg);
                return;
            }

            User = user;
        }

        _ = await SaveReservation(User);
    }

    public async Task<bool> SaveReservation(ApplicationUser user)
    {
        if (!_selectedRooms.Any())
        {
            _alert.ShowAlert(Severity.Error, "Wybierz przynajmniej jeden pokój");
            return false;
        }

        if (_dateRange.Start is null || _dateRange.End is null)
        {
            _alert.ShowAlert(Severity.Error, "Wybierz datę rezerwacji");
            return false;
        }

        OpenOverlay();
        _reservation.StartDate = _dateRange.Start ?? DateTime.MinValue;
        _reservation.EndDate = _dateRange.End ?? DateTime.MinValue;

        // Add the user to the reservation
        _reservation.User = user;
        _reservation.UserId = user.Id;

        var result = await ReservationService.AddReservationAsync(_reservation, _selectedRooms);
        ChangeOverlayMessage(!result ? "Coś poszło nie tak" : "Pomyślnie dodano rezerwację");

        // create transaction to be paid if the reservation was added successfully
        if (!result) return result;

        _transactionId = await TransactionService.AddTransactionAsync(_reservation, _totalPrice);
        _showPaymentDialog = true;

        return result;
    }

    private void OpenOverlay()
    {
        _isOverlayVisible = true;
        StateHasChanged();
    }

    private void ChangeOverlayMessage(string message)
    {
        _overlayMessage = message;
        StateHasChanged();
    }

    private void ConfirmationOkClicked()
    {
        NavigationManager.NavigateTo(RedirectUrl);
    }

    private void RecalculateTotalPrice()
    {
        _totalPrice = 0;
        var stayLength = Math.Ceiling((_dateRange.End - _dateRange.Start)?.TotalDays ?? -1);
        foreach (var room in _selectedRooms)
        {
            _totalPrice += room.PricePerNight * (decimal)stayLength;
        }
    }

    private bool IsDateAvailable(DateTime date)
    {
        var roomsToFind = _selectedRooms.ToList();

        var selectedRoom = _availableRoomsFromDb.FirstOrDefault(room => room.Id == _selectedRoomId);
        if (selectedRoom is not null) roomsToFind.Add(selectedRoom);

        // this could be optimized by using a dictionary of rooms and their reservations
        _currentReservationsForRooms = ReservationService.AllReservationsForAnyOfRooms(roomsToFind).ToList();

        return !_currentReservationsForRooms.All(r => r.StartDate > date || r.EndDate < date);
    }

}