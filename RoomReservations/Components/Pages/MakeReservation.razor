@page "/make-reservation"
@using RoomReservations.Models
@using RoomReservations.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject IAvailableRoomService AvailableRoomService
@inject IReservationService ReservationService
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@attribute [Authorize]

@rendermode InteractiveServer

<h3>MakeReservation</h3>

Formularz tworzenia rezerwacji

<EditForm Model="@_reservation" OnSubmit="Submit" FormName="ReservationForm">
    <MudSelect T="int" Label="Select Room" @bind-Value="@_selectedRoomId">
        @foreach (var room in _availableRoomsFromDb)
        {
            <MudSelectItem T="int" Value="@room.Id">@room.Name</MudSelectItem>
        }
    </MudSelect>
    <br/>
    <br/>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddSelectedRoom">Add Room</MudButton>
    <br/>
    <MudPaper Width="300px">
        <MudList Clickable="false">
            <MudListSubheader>Selected rooms</MudListSubheader>
            @foreach (var selectedRoom in _selectedRooms)
            {
                <MudListItem>@selectedRoom.Name</MudListItem>
            }
        </MudList>
    </MudPaper>
    <br/>
    <MudDateRangePicker Label="Basic range picker" @bind-DateRange="_dateRange" MinDate="@DateTime.Now.AddDays(-1)" PickerClosed="ReloadAvailableRoomsAtDates"/>
    <br/>
    <Alert @ref="_alert"></Alert>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Submit</MudButton>
</EditForm>


@code {
    Reservation _reservation = new();
    List<Room> _availableRoomsFromDb = [];
    readonly List<Room> _selectedRooms = [];
    private DateRange _dateRange = new(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
    private int _selectedRoomId;

    private Alert _alert = new();

    protected override async Task OnInitializedAsync()
    {
        await ReloadAvailableRoomsAtDates();
    }

    private void AddSelectedRoom()
    {
        // Find the selected room by its ID
        var selectedRoom = _availableRoomsFromDb.FirstOrDefault(room => room.Id == _selectedRoomId);

        // Add the selected room to the reservation if it's not already added
        if (selectedRoom != null && !_selectedRooms.Contains(selectedRoom))
        {
            _availableRoomsFromDb.Remove(selectedRoom);
            _selectedRooms.Add(selectedRoom);
        }

        // Clear the selection
        _selectedRoomId = 0;
    }

    private async Task ReloadAvailableRoomsAtDates()
    {
        var start = _dateRange.Start ?? DateTime.MinValue.Date;
        var end = _dateRange.End ?? DateTime.MaxValue.Date;
        _availableRoomsFromDb = await AvailableRoomService.GetAvailableRoomsAsync(start, end);
    }

    public async void Submit(EditContext context)
    {
        if (!_selectedRooms.Any())
        {
            _alert.ShowAlert(Severity.Error, "Please select at least one room");
            return;
        }

        if (_dateRange.Start is null || _dateRange.End is null)
        {
            _alert.ShowAlert(Severity.Error, "Please select reservation dates");
            return;
        }

        _reservation.StartDate = _dateRange.Start ?? DateTime.MinValue;
        _reservation.EndDate = _dateRange.End ?? DateTime.MinValue;

        // Check if the user is logged in
        if (HttpContextAccessor.HttpContext is null)
        {
            _alert.ShowAlert(Severity.Error, "Something went wrong");
            return;
        }

        var user = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
        if (user is null)
        {
            _alert.ShowAlert(Severity.Error, "Please log in to make a reservation");
            return;
        }

        // Add the user to the reservation
        _reservation.User = user;
        _reservation.UserId = user.Id;

        var result = await ReservationService.AddReservationAsync(_reservation, _selectedRooms);

        if (!result) _alert.ShowAlert(Severity.Error, "Something went wrong");
        else _alert.ShowAlert(Severity.Success, "Reservation added successfully");

        _reservation = new Reservation();
        await ReloadAvailableRoomsAtDates();
    }

}