@page "/make-reservation"
@using RoomReservations.Data
@using RoomReservations.Models
@using Microsoft.AspNetCore.Components
@inject IAvailableRoomService AvailableRoomService
@inject IReservationService ReservationService
@rendermode InteractiveServer

<h3>MakeReservation</h3>

Formularz tworzenia rezerwacji

<EditForm Model="@reservation" OnSubmit="Submit" FormName="ReservationForm">
	<MudSelect T="int" Label="Select Room" @bind-Value="@selectedRoomId">
		@foreach (var room in rooms)
		{
			<MudSelectItem T="int" Value="@room.Id">@room.Name</MudSelectItem>
		}
	</MudSelect>
	<br />
	<br />
	<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="AddSelectedRoom">Add Room</MudButton>
	<br/>
	<MudPaper Width="300px">
		<MudList Clickable="false">
			<MudListSubheader>Selected rooms</MudListSubheader>
			@foreach (var selectedRoom in reservation.Rooms)
			{
				<MudListItem>@selectedRoom.Name</MudListItem>
			}
		</MudList>
	</MudPaper>
	<br />
	<MudDateRangePicker Label="Basic range picker" @bind-DateRange="_dateRange" PickerClosed="ReloadAvailableRoomsAtDates"/>
	<br />
	@if (showAlert)
	{
		<MudAlert Severity=@severity ShowCloseIcon="true" CloseIconClicked="(() => showAlert = false)">@message</MudAlert>
	}
	<MudButton Variant="Variant.Filled" Color="Color.Primary" ButtonType="ButtonType.Submit">Submit</MudButton>
</EditForm>


@code {
	Reservation reservation = new();
	List<Room> rooms = new();
	private DateRange _dateRange = new DateRange(DateTime.Now.Date, DateTime.Now.AddDays(5).Date);
	private int selectedRoomId;
	private bool showAlert = false;
	private Severity severity = Severity.Info;
	private string message = "Your alert message goes here.";

	protected override async Task OnInitializedAsync()
	{
		await ReloadAvailableRoomsAtDates();
	}

	private void AddSelectedRoom()
	{
		// Find the selected room by its ID
		var selectedRoom = rooms.FirstOrDefault(room => room.Id == selectedRoomId);

		// Add the selected room to the reservation if it's not already added
		if (selectedRoom != null && !reservation.Rooms.Contains(selectedRoom))
		{
			rooms.Remove(selectedRoom);
			reservation.Rooms.Add(selectedRoom);
		}

		// Clear the selection
		selectedRoomId = 0;
	}

	private async Task ReloadAvailableRoomsAtDates()
	{
		DateTime start = _dateRange.Start ?? DateTime.MinValue.Date;
		DateTime end = _dateRange.End ?? DateTime.MaxValue.Date;
		rooms = await AvailableRoomService.GetAvailableRoomsAsync(start, end);
	}

	public async void Submit(EditContext context)
	{
		if (!reservation.Rooms.Any())
		{
			ShowAlert(Severity.Error, "Please select at least one room");
			return;
		}
		if(_dateRange.Start is null || _dateRange.End is null)
		{
			ShowAlert(Severity.Error, "Please select reservation dates");
			return;
		}

		reservation.StartDate = _dateRange.Start ?? DateTime.MinValue;
		reservation.EndDate = _dateRange.End ?? DateTime.MinValue;
		bool result = await ReservationService.AddReservationAsync(reservation);

		if (!result) ShowAlert(Severity.Error, "Something went wrong");
		else ShowAlert(Severity.Success, "Reservation added successfully");

		reservation = new();	
		await ReloadAvailableRoomsAtDates();
	}

	private void HideAlert()
	{
		showAlert = false;
	}

	private void ShowAlert(Severity severity, string message)
	{
		this.severity = severity;
		this.message = message;
		showAlert = true;
	}
}
