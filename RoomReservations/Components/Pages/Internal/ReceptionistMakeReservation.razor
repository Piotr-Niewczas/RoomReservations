@page "/internal/ReceptionistMakeReservation"
@using RoomReservations.Models
@using RoomReservations.Data
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations
@inject UserService UserService
@attribute [Authorize(Roles = RoleNames.Receptionist)]
<h3>Tworzenie rezerwacji dla klienta</h3>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="_tabs" Border="true">
    <MudTabPanel Text="Nowy klient">
        <MudForm @ref="_newUserForm" @bind-IsValid="@_success" @bind-Errors="@_errors">
            <MudTextField T="string" Label="Email klienta" Required="true" RequiredError="Email jest wymagany!"
                @bind-Value="Input.Email"
                Validation="@(new EmailAddressAttribute { ErrorMessage = "Adres email jest nie poprawny!" })" />

            <div class="d-flex justify-space-between gap-4">
                <MudTextField T="string" Label="Imię klienta" Required="true" RequiredError="Imię jest wymagane"
                    @bind-Value="Input.FirstName" />

                <MudTextField T="string" Label="Nazwisko klienta" Required="true" RequiredError="Nazwisko jest wymagane"
                    @bind-Value="Input.LastName" />
            </div>
        </MudForm>
    </MudTabPanel>
    <MudTabPanel Text="Obecny klient">
        <MudTextField T="string" Label="Email klienta" Required="true" RequiredError="Email jest wymagany!"
            @bind-Value="Input.Email"
            Validation="@(new EmailAddressAttribute { ErrorMessage = "Adres email jest nie poprawny!" })" />
        <div style="padding-top: 1em">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SearchForUser">Wyszukaj</MudButton>
        </div>
        @if (_userToPlaceReservation is not null)
        {
            <MudText Typo="Typo.h6">Znaleziono użytkownika:</MudText>
            <MudGrid Spacing="3">
                <MudItem>
                    <MudText>Imię: @_userToPlaceReservation.FirstName</MudText>
                </MudItem>
                <MudItem>
                    <MudText>Nazwisko: @_userToPlaceReservation.LastName</MudText>
                </MudItem>
            </MudGrid>
        }
    </MudTabPanel>
</MudTabs>
<Alert @ref="_alert"></Alert>
<div style="padding-top: 3em">
    <MudPaper Class="pa-6" Elevation="2">
        <MakeReservation @ref="_makeReservation" HijackSubmit="Submit" RedirectUrl="/internal/ViewAllReservations">
        </MakeReservation>
    </MudPaper>
</div>

@code {
    MudForm _newUserForm = new();
    bool _success;
    string[] _errors = [];
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    MakeReservation _makeReservation = new();

    MudTabs _tabs = new();

    ApplicationUser? _userToPlaceReservation;
    Alert _alert = new();

    private async Task Submit()
    {
        // check what upper tab is selected
        if (_tabs.ActivePanelIndex == 0)
        {
            // new client
            if (_newUserForm.Validate().IsCompletedSuccessfully == false)
            {
                _alert.ShowAlert(Severity.Error, "Formularz zawiera błędy!");
                return;
            }

            // check if client that we want to create already exists
            if (await UserService.FindUserByEmailAsync(Input.Email) is not null)
            {
                _alert.ShowAlert(Severity.Error, "Użytkownik o tym adresie email już istnieje!");
                return;
            }

            // create new client
            try
            {
                _userToPlaceReservation = await UserService.AddUserAsync(Input.Email, Input.FirstName, Input.LastName);
            }
            catch (Exception e)
            {
                _alert.ShowAlert(Severity.Error, $"Wystąpił błąd podczas tworzenia użytkownika! {e.Message}");
                return;
            }

            _alert.ShowAlert(Severity.Info, "Użytkownik został utworzony.");
        }

        if (_userToPlaceReservation is null)
        {
            _alert.ShowAlert(Severity.Error, "Nie wybrano użytkownika!");
            return;
        }

        // place reservation with selected user
        _ = await _makeReservation.SaveReservation(_userToPlaceReservation);
    }

    private async Task SearchForUser()
    {
        _alert.HideAlert();
        var user = await UserService.FindUserByEmailAsync(Input.Email);
        if (user is null)
        {
            _alert.ShowAlert(Severity.Error, $"Użytkownik o adresie email {Input.Email} nie istnieje!");
            return;
        }

        _userToPlaceReservation = user;
    }


    private static string AtLeast2Len_NoDigit_FirstUpper(string arg, string fieldName)
    {
        if (string.IsNullOrWhiteSpace(arg))
        {
            return $"{fieldName} jest wymagane!";
        }

        if (arg.Length < 2)
            return $"{fieldName} musi zawierać przynajmniej 2 znaki!";
        if (char.IsLower(arg[0]))
            return $"{fieldName} musi zaczynać się z dużej litery!";
        if (Regex.IsMatch(arg, @"[\d\W]"))
            return $"{fieldName} nie może zawierać cyfr i znaków specjalnych!";

        return "";
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Niepoprawny adres email")]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Imię jest wymagane")]
        [DataType(DataType.Text)]
        [Display(Name = "Imię")]
        [MinLength(2, ErrorMessage = "Imię musi zawierać przynajmniej 2 znaki")]
        [RegularExpression(@"^[A-z\p{Lu}][a-z\p{Ll}]*$", ErrorMessage = "Imię musi zaczynać się z dużej litery i nie może zawierać cyfr i znaków specjalnych")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Nazwisko jest wymagane")]
        [DataType(DataType.Text)]
        [Display(Name = "Nazwisko")]
        [MinLength(2, ErrorMessage = "Nazwisko musi zawierać przynajmniej 2 znaki")]
        [RegularExpression(@"^([A-Z\p{Lu}][a-z\p{Ll}]+)([\ \-][A-z\p{Lu}][a-z\p{Ll}]+)*$", ErrorMessage = "Nazwisko musi zaczynać się z dużej litery i nie może zawierać cyfr")]
        public string LastName { get; set; } = "";
    }

}