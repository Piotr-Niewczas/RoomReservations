@page "/internal/ReceptionistMakeReservation"
@using RoomReservations.Models
@using RoomReservations.Data
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@inject UserService UserService
@attribute [Authorize(Roles = RoleNames.Receptionist)]
<h3>Tworzenie rezerwacji dla klienta</h3>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" @ref="_tabs" Border="true">
    <MudTabPanel Text="Nowy klient">
        <EditForm EditContext="@EditContext">
            <DataAnnotationsValidator/>
            <MudTextField Label="Email klienta" @bind-Value="Input.Email" @bind-Value:after="CheckValidity"/>

            <div class="d-flex justify-space-between gap-4">
                <MudTextField Label="Imię klienta" @bind-Value="Input.FirstName" @bind-Value:after="CheckValidity"/>

                <MudTextField Label="Nazwisko klienta" @bind-Value="Input.LastName" @bind-Value:after="CheckValidity"/>
            </div>
        </EditForm>
    </MudTabPanel>
    <MudTabPanel Text="Obecny klient">
        <MudTextField T="string" Label="Email klienta" Required="true" RequiredError="Email jest wymagany!"
                      @bind-Value="Input.Email"/>
        <div style="padding-top: 1em">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SearchForUser">Wyszukaj</MudButton>
        </div>
        @if (_userToPlaceReservation is not null)
        {
            <MudText Typo="Typo.h6">Znaleziono użytkownika:</MudText>
            <MudGrid Spacing="3">
                <MudItem>
                    <MudText>Imię: @_userToPlaceReservation.FirstName</MudText>
                </MudItem>
                <MudItem>
                    <MudText>Nazwisko: @_userToPlaceReservation.LastName</MudText>
                </MudItem>
            </MudGrid>
        }
    </MudTabPanel>
</MudTabs>
<Alert @ref="_alert"></Alert>
<div style="padding-top: 3em">
    <MudPaper Class="pa-6" Elevation="2">
        <MakeReservation DisableSubmit="@DisableSubmit" @ref="_makeReservation" HijackSubmit="Submit" RedirectUrl="/internal/ViewAllReservations">
        </MakeReservation>
    </MudPaper>
</div>

@code {
    EditContext EditContext { get; set; } = new(new InputModel());

    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    MakeReservation _makeReservation = new();
    bool DisableSubmit { get; set; } = true;

    MudTabs _tabs = new();

    ApplicationUser? _userToPlaceReservation;
    Alert _alert = new();


    protected override void OnInitialized()
    {
        EditContext = new EditContext(Input);
        DisableSubmit = EditContext.Validate();
    }

    /// <summary>
    ///     On field changed event - disable submit button if data for user is invalid
    /// </summary>
    private void CheckValidity()
    {
        DisableSubmit = !EditContext.Validate();
        // If form is not valid, display error message
        if (EditContext.GetValidationMessages().Any())
        {
            _alert.ShowAlert(Severity.Error, EditContext.GetValidationMessages().First());
        }
        else
        {
            _alert.HideAlert();
        }
    }

    private async Task Submit()
    {
        // check what upper tab is selected
        if (_tabs.ActivePanelIndex == 0)
        {
            // new client
            if (!EditContext.Validate())
            {
                _alert.ShowAlert(Severity.Error, EditContext.GetValidationMessages().First());
                return;
            }

            // check if client that we want to create already exists
            if (await UserService.FindUserByEmailAsync(Input.Email) is not null)
            {
                _alert.ShowAlert(Severity.Error, "Użytkownik o tym adresie email już istnieje!");
                return;
            }

            // create new client
            try
            {
                _userToPlaceReservation = await UserService.AddUserAsync(Input.Email, Input.FirstName, Input.LastName);
            }
            catch (Exception e)
            {
                _alert.ShowAlert(Severity.Error, $"Wystąpił błąd podczas tworzenia użytkownika! {e.Message}");
                return;
            }

            _alert.ShowAlert(Severity.Info, "Użytkownik został utworzony.");
        }

        if (_userToPlaceReservation is null)
        {
            _alert.ShowAlert(Severity.Error, "Nie wybrano użytkownika!");
            return;
        }

        // place reservation with selected user
        var isSuccessful = await _makeReservation.SaveReservation(_userToPlaceReservation);

        // if reservation was not placed successfully, delete new user
        if (!isSuccessful && _tabs.ActivePanelIndex == 0 && _userToPlaceReservation.Email != null)
        {
            await UserService.DeleteUserAsync(_userToPlaceReservation);
            _alert.ShowAlert(Severity.Warning, "Nie utworzono użytkownika ani rezerwacji!");
        }
    }

    private async Task SearchForUser()
    {
        _alert.HideAlert();
        var user = await UserService.FindUserByEmailAsync(Input.Email);
        if (user is null)
        {
            _alert.ShowAlert(Severity.Error, $"Użytkownik o adresie email {Input.Email} nie istnieje!");
            return;
        }

        _userToPlaceReservation = user;
        DisableSubmit = false;
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Niepoprawny adres email")]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Imię jest wymagane")]
        [DataType(DataType.Text)]
        [Display(Name = "Imię")]
        [MinLength(2, ErrorMessage = "Imię musi zawierać przynajmniej 2 znaki")]
        [RegularExpression(@"^[A-Z\p{Lu}][a-z\p{Ll}]*$", ErrorMessage = "Imię musi zaczynać się z dużej litery i nie może zawierać cyfr i znaków specjalnych")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Nazwisko jest wymagane")]
        [DataType(DataType.Text)]
        [Display(Name = "Nazwisko")]
        [MinLength(2, ErrorMessage = "Nazwisko musi zawierać przynajmniej 2 znaki")]
        [RegularExpression(@"^([A-Z\p{Lu}][a-z\p{Ll}]+)([\ \-][A-z\p{Lu}][a-z\p{Ll}]+)*$", ErrorMessage = "Nazwisko musi zaczynać się z dużej litery i nie może zawierać cyfr")]
        public string LastName { get; set; } = "";
    }

}