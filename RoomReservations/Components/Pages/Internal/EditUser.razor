@page "/internal/edit-user/{id}"
@using RoomReservations.Models
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@inject UserManager<ApplicationUser> UserManager
@inject SharedMethodsService SharedMethodsService

@attribute [Authorize(Roles = RoleNames.Admin)]
<h3>Edytuj dane użytkownika</h3>

@if (_userToEdit is null)
{
    <p>Użytkownik nie istnieje</p>
    return;
}
<EditForm EditContext="@EditContext" Style="position: relative">
    <DataAnnotationsValidator/>
    <MudOverlay Visible="_isDeletedOverlayVisible" Style="background-color: rgba(0, 0, 0, 0.5) !important"
                Absolute="true">
        <MudPaper Class="pa-16 ma-2" Elevation="3">
            <MudText Typo="Typo.h4">Użytkownik usunięty</MudText>
        </MudPaper>
    </MudOverlay>
    <MudTextField Label="Email klienta" @bind-Value="Input.Email" @bind-Value:after="DisplayValidationErrors" Immediate="true"/>

    <div class="d-flex justify-space-between gap-4">
        <MudTextField Label="Imię klienta" @bind-Value="Input.FirstName" @bind-Value:after="DisplayValidationErrors" Immediate="true"/>

        <MudTextField Label="Nazwisko klienta" @bind-Value="Input.LastName" @bind-Value:after="DisplayValidationErrors" Immediate="true"/>
    </div>

    <MudTextField Label="Nr tel klienta" @bind-Value="Input.PhoneNumber" @bind-Value:after="DisplayValidationErrors" Immediate="true"/>

    <MudSelect Label="Rola" @bind-Value="Input.Role" @bind-Value:after="DisplayValidationErrors" Immediate="true">
        @foreach (var role in RoleNames.Roles)
        {
            <MudSelectItem T="string" Value="@role">@role</MudSelectItem>
        }
    </MudSelect>
</EditForm>
<MudGrid Spacing="10" Justify="Justify.Center" Style="padding-top: 1em">
    <MudItem>
        <MudButton Variant="Variant.Filled" Color="Color.Primary"
                   Disabled="@(!EditContext.Validate() || _isDeletedOverlayVisible)" ButtonType="ButtonType.Submit" OnClick="SaveUser">
            Zapisz
        </MudButton>
    </MudItem>

    <MudItem>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Disabled="@_isDeletedOverlayVisible"
                   OnClick="DeleteUser">
            Usuń
        </MudButton>
    </MudItem>

    <MudItem>
        <MudButton Variant="Variant.Filled" Color="@(_isDeletedOverlayVisible ? Color.Primary : Color.Default)"
                   OnClick="SharedMethodsService.GoBackAsync">
            Wróć
        </MudButton>
    </MudItem>
</MudGrid>
<div style="padding-top: 1em">
<Alert @ref="_alert"></Alert>
</div>

@code {
    [Parameter] public string Id { get; set; } = string.Empty;
    EditContext EditContext { get; set; } = new(new InputModel());
    ApplicationUser? _userToEdit = new();

    // ReSharper disable once AutoPropertyCanBeMadeGetOnly.Local
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    Alert _alert = new();
    bool _isDeletedOverlayVisible;

    protected override async Task OnInitializedAsync()
    {
        EditContext = new EditContext(Input);
        _userToEdit = await UserManager.FindByIdAsync(Id);

        if (_userToEdit is not null)
        {
            Input.Email = _userToEdit.Email!;
            Input.FirstName = _userToEdit.FirstName;
            Input.LastName = _userToEdit.LastName;
            Input.PhoneNumber = _userToEdit.PhoneNumber;
            Input.Role = (await UserManager.GetRolesAsync(_userToEdit)).FirstOrDefault() ?? "Brak roli";
        }
    }

    /// <summary>
    /// Checks if the fields are valid and displays the first error message in the alert if not.
    /// </summary>
    private void DisplayValidationErrors()
    {
        if (!EditContext.Validate())
        {
            _alert.ShowAlert(Severity.Error, EditContext.GetValidationMessages().First());
        } else {
            _alert.HideAlert();
        }
    }

    private async Task SaveUser()
    {
        if (_userToEdit is null)
        {
            return;
        }

        if (!EditContext.Validate())
        {
            _alert.ShowAlert(Severity.Error, EditContext.GetValidationMessages().First());
            return;
        }

        _userToEdit.UserName = Input.Email;
        _userToEdit.Email = Input.Email;
        _userToEdit.FirstName = Input.FirstName;
        _userToEdit.LastName = Input.LastName;
        _userToEdit.PhoneNumber = Input.PhoneNumber;

        var result = await UserManager.UpdateAsync(_userToEdit);
        if (result.Succeeded)
        {
            await UserManager.RemoveFromRolesAsync(_userToEdit, await UserManager.GetRolesAsync(_userToEdit));
            await UserManager.AddToRoleAsync(_userToEdit, Input.Role);
            _alert.ShowAlert(Severity.Success, "Zapisano pomyślnie");
        }
        else
        {
            _alert.ShowAlert(Severity.Error, "Wystąpił błąd: " + result.Errors.FirstOrDefault()?.Description);
        }
    }

    private async Task DeleteUser()
    {
        if (_userToEdit is null)
        {
            return;
        }

        _isDeletedOverlayVisible = true;
        await UserManager.DeleteAsync(_userToEdit);
    }

    private sealed class InputModel
    {
        [Required(ErrorMessage = "Email jest wymagany")]
        [EmailAddress(ErrorMessage = "Niepoprawny adres email")]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required(ErrorMessage = "Imię jest wymagane")]
        [DataType(DataType.Text)]
        [Display(Name = "Imię")]
        [MinLength(2, ErrorMessage = "Imię musi zawierać przynajmniej 2 znaki")]
        [RegularExpression(@"^[A-Z\p{Lu}][a-z\p{Ll}]*$", ErrorMessage = "Imię musi zaczynać się z dużej litery i nie może zawierać cyfr i znaków specjalnych")]
        public string FirstName { get; set; } = "";

        [Required(ErrorMessage = "Nazwisko jest wymagane")]
        [DataType(DataType.Text)]
        [Display(Name = "Nazwisko")]
        [MinLength(2, ErrorMessage = "Nazwisko musi zawierać przynajmniej 2 znaki")]
        [RegularExpression(@"^([A-Z\p{Lu}][a-z\p{Ll}]+)([\ \-][A-z\p{Lu}][a-z\p{Ll}]+)*$", ErrorMessage = "Nazwisko musi zaczynać się z dużej litery i nie może zawierać cyfr")]
        public string LastName { get; set; } = "";

        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }

        // Role
        [Required(ErrorMessage = "Rola jest wymagana")]
        [DataType(DataType.Text)]
        [Display(Name = "Rola")]
        public string Role { get; set; } = "";
    }

}