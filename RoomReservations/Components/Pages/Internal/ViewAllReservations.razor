@page "/internal/ViewAllReservations"
@using RoomReservations.Data
@using RoomReservations.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@inject IReservationService ReservationService
@inject NavigationManager NavigationManager
@inject SharedMethodsService SharedMethodsService

@attribute [Authorize(Roles = $"{RoleNames.Receptionist}, {RoleNames.Admin}, {RoleNames.Employee}")]
<h3>Wszystkie rezerwacje</h3>

<MudTable Items="@_reservations" Hover="true" SortLabel="Sort By">
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortBy="(Reservation context) => context.Id">Id</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="(Reservation context) => context.StartDate">Data meldunku</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="(Reservation context) => context.EndDate">Data odmeldowania</MudTableSortLabel>
        </MudTh>
        <MudTh>Rooms</MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="(Reservation context) => context.User.UserName">Email klienta</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="(Reservation context) => context.IsPaid">Opłacono</MudTableSortLabel>
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortBy="(Reservation context) => context.IsInProgress">Czy jest w trakcie</MudTableSortLabel>
        </MudTh>
        <MudTh>Edycja</MudTh>
        <MudTh>Transakcje</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Start Date">@context.StartDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="End Date">@context.EndDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="Rooms">@RoomsToString(context.RoomReservations)</MudTd>
        <MudTd DataLabel="Creator">@context.User.UserName</MudTd>
        <MudTd DataLabel="Is Paid">
            @if (context.IsPaid)
            {
                <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"/>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Clear" Color="Color.Error"/>
            }
        </MudTd>
        <MudTd DataLabel="Is in progress">
            @if (context.IsInProgress)
            {
                <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success"/>
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Filled.Clear" Color="Color.Error"/>
            }
        </MudTd>
        <MudTd DataLabel="Edit">
            <MudButton Disabled="@(!_canEdit)" Color="Color.Primary" Variant="Variant.Filled"
                       OnClick="@(() => NavigationManager.NavigateTo($"/edit-reservation/{context.Id}"))">
                Edytuj
            </MudButton>
        </MudTd>
        <MudTd DataLabel="Transactions">
            <MudButton Variant="@(context.IsPaid ? Variant.Outlined : Variant.Filled)" Color="Color.Primary"
                       OnClick="@(() => NavigationManager.NavigateTo($"/pay-reservation/{context.Id}"))">
                @(context.IsPaid ? "Historia" : "Opłać")
            </MudButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new[] { 15, 30, 100 }" RowsPerPageString="Wierszy na stronę:" InfoFormat="{first_item}-{last_item} z {all_items}"/>
    </PagerContent>
</MudTable>

@code {
    List<Reservation> _reservations = [];
    bool _canEdit;

    protected override async Task OnInitializedAsync()
    {
        _reservations = await ReservationService.CreateReservationQuery()
            .WithRooms()
            .WithTransactions()
            .WithUsers()
            .ToListAsync();

        _canEdit = await SharedMethodsService.IsCurrentUserInRoleAsync(RoleNames.Receptionist);
    }

    private static string RoomsToString(IEnumerable<RoomReservation> rrs)
    {
        var result = string.Join(", ", rrs.Select(rr => rr.Room.Name));
        return result;
    }

}