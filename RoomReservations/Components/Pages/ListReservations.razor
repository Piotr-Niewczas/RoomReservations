@inject QueryFactory QueryFactory
@inject UserManager<ApplicationUser> UserManager
@inject IHttpContextAccessor HttpContextAccessor
@page "/list-reservations"
@using Microsoft.EntityFrameworkCore
@using RoomReservations.Models
@using RoomReservations.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Authorization
@inject IJSRuntime JsRuntime
@attribute [Authorize]

@if (!_showList)
{
    <MudText Typo="Typo.h2">Something went wrong.</MudText>
    <MudAlert Severity="Severity.Error">@_listLoadError</MudAlert>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GoBack">Go back</MudButton>
    return;
}


<h3>List of your reservations:</h3>
@foreach (var reservation in _reservations)
{
    <ViewReservation ReservationToDisplay="reservation"></ViewReservation>
    <br/>
}


@code {
    private List<Reservation> _reservations = [];

    private bool _showList;
    private string _listLoadError = "Unknown error has occured";

    protected override async Task OnInitializedAsync()
    {
        // please note that we cannot use _alert.ShowAlert() here because it is not yet initialized

        // Check if the user is logged in
        if (HttpContextAccessor.HttpContext is null)
        {
            _listLoadError = "Something went wrong";
            return;
        }

        var user = await UserManager.GetUserAsync(HttpContextAccessor.HttpContext.User);
        if (user is null)
        {
            _listLoadError = "Please log in to make a reservation";
            return;
        }

        _reservations = await QueryFactory.Create<Reservation>()
            .Include(r => r.RoomReservations)
            .ThenInclude(rr => rr.Room)
            .Where(r => r.UserId == user.Id)
            .ToListAsync();
        _showList = true;
    }

    private async void GoBack()
    {
        // Navigate to previous page user was on using JS
        await JsRuntime.InvokeVoidAsync("history.back");
    }

}