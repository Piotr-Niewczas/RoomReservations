@page "/edit-reservation/{id:int}"
@using RoomReservations.Data
@using RoomReservations.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@inject IReservationService ReservationService
@inject SharedMethodsService SharedMethodsService
@attribute [Authorize]

@if (!_showForm)
{
    <MudText Typo="Typo.h2">Coś poszło nie tak.</MudText>
    <MudAlert Severity="Severity.Error">@_formLoadError</MudAlert>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="SharedMethodsService.GoBackAsync">Wróć</MudButton>
    return;
}

<MudCard>
    <MudCardContent Style="position: relative;">
        <MudOverlay Visible="_isOverlayVisible" Style="background-color: rgba(0, 0, 0, 0.5) !important" Absolute="true">
            <MudPaper Class="pa-16 ma-2" Elevation="3">
                <MudText Typo="Typo.h4">Rezerwacja usunięta</MudText>
            </MudPaper>
        </MudOverlay>
        <MudText Typo="Typo.h6">Edytuj rezerwację</MudText>
        <MudText>ID rezerwacji: @_reservationToEdit.Id</MudText>
        <MudText>Email klienta: @_reservationToEdit.User.UserName </MudText>
        <MudDateRangePicker Label="Zmień datę rezerwacji" @bind-DateRange="_dateRange" MinDate="@DateTime.Now.AddDays(-1)" PickerClosed="DatePickerClosed"/>
        <MudText>Pokoje:</MudText>
        @foreach (var rr in _reservationToEdit.RoomReservations)
        {
            <MudText>"@rr.Room.Name"</MudText>
        }
    </MudCardContent>
    <MudCardActions>
        <MudGrid Spacing="10" Justify="Justify.Center">
            <MudItem>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(_isDataIncorrect || _isOverlayVisible)" OnClick="SaveChanges">Zapisz</MudButton>
            </MudItem>

            <MudItem>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Disabled="@_isOverlayVisible" OnClick="DeleteReservation">Odwołaj rezerwację</MudButton>
            </MudItem>

            <MudItem>
                <MudButton Variant="Variant.Filled" Color="@(_isOverlayVisible ? Color.Primary : Color.Default)" OnClick="SharedMethodsService.GoBackAsync">Wróć</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardActions>
    <Alert @ref="_alert"></Alert>
</MudCard>

@code {
    [Parameter] public int Id { get; set; }

    Reservation _reservationToEdit = new();
    private DateRange _dateRange = new();

    private Alert _alert = new();
    private bool _isDataIncorrect = true;
    private bool _showForm;
    private string _formLoadError = "Wystąpił nieznany błąd";
    private bool _isOverlayVisible;
    private bool _isUserReceptionist;

    protected override async Task OnInitializedAsync()
    {
        // please note that we cannot use _alert.ShowAlert() here because it is not yet initialized

        var reservationsFromDb = await ReservationService.CreateReservationQuery().WhereId(Id).WithRooms().ToListAsync();
        if (reservationsFromDb.Count != 1)
        {
            _formLoadError = "Rezerwacja o podanym ID nie istnieje";
            return;
        }

        _reservationToEdit = reservationsFromDb.FirstOrDefault()!; // We know there is one element in the list

        var (user, error) = await SharedMethodsService.GetCurrentUserAsync();

        if (user is null)
        {
            _formLoadError = error == GetCurrentUserError.UserNotLoggedIn ? "Zaloguj się, aby edytować rezerwacje" : "Wystąpił nieznany błąd";
            return;
        }

        _isUserReceptionist = await SharedMethodsService.IsCurrentUserInRoleAsync(RoleNames.Receptionist);
        // Check if user is the owner of the reservation or is a receptionist
        if (_reservationToEdit.User == user || _isUserReceptionist)
        {
            _dateRange.Start = _reservationToEdit.StartDate;
            _dateRange.End = _reservationToEdit.EndDate;
            _showForm = true;
        }
        else
        {
            _reservationToEdit = new Reservation(); // Clear the reservation
            _formLoadError = "Ta rezerwacja nie należy do Ciebie";
        }
    }

    private async void DatePickerClosed()
    {
        // Check if rooms are available at the given dates. Remove current reservation from the list.
        var collidingReservations = await ReservationService.ReservationsForAnyOfRoomsInDateRange(
                _reservationToEdit.RoomReservations.Select(rr => rr.Room).ToList(),
                _dateRange.Start ?? _reservationToEdit.StartDate,
                _dateRange.End ?? _reservationToEdit.EndDate)
            .Where(r => r.Id != _reservationToEdit.Id).ToListAsync();


        // If not, show alert
        if (collidingReservations.Count > 0)
        {
            _isDataIncorrect = true;
            var collidingRoomNames = string.Join(", ", collidingReservations.SelectMany(r => r.RoomReservations.Select(rr => rr.Room.Name)).Distinct().ToList());
            _alert.ShowAlert(Severity.Error, $"Pokój '{collidingRoomNames}' nie jest dostępny w podanym terminie");
            return;
        }

        // If rooms are available, update the reservation dates
        _reservationToEdit.StartDate = _dateRange.Start ?? _reservationToEdit.StartDate;
        _reservationToEdit.EndDate = _dateRange.End ?? _reservationToEdit.EndDate;

        _isDataIncorrect = false;
    }

    private async Task SaveChanges()
    {
        var wasSuccessful = await ReservationService.UpdateReservationAsync(_reservationToEdit);

        if (!wasSuccessful)
        {
            // Show error alert
            _alert.ShowAlert(Severity.Error, "Wystąpił błąd podczas aktualizacji rezerwacji");
            return;
        }

        // Show success alert
        _alert.ShowAlert(Severity.Success, "Zaktualizowano rezerwację pomyślnie");
        _isDataIncorrect = true; // Disable save button
    }

    private async Task DeleteReservation()
    {
        var result = await ReservationService.DeleteReservationAsync(_reservationToEdit.Id);
        if (result)
        {
            _isOverlayVisible = true;
        }
        else _alert.ShowAlert(Severity.Error, "Nie udało się usunąć rezerwacji");
    }

}