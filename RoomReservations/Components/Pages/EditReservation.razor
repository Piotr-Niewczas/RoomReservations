@page "/edit-reservation/{id:int}"
@using RoomReservations.Data
@using RoomReservations.Models
@using Microsoft.EntityFrameworkCore
@inject IReservationService ReservationService
@inject IJSRuntime JsRuntime

<h3>EditReservation</h3>

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6">Edit Reservation</MudText>
        <MudText>Reservation ID: @_reservationToEdit.Id</MudText>
        <MudText>Customer Name: NYI </MudText>
        <MudDateRangePicker Label="Reservation Date Picker" @bind-DateRange="_dateRange" MinDate="@DateTime.Now" PickerClosed="DatePickerClosed"/>
        <MudText>Rooms:</MudText>
        @foreach (var rr in _reservationToEdit.RoomReservations)
        {
            <MudText>"@rr.Room.Name"</MudText>
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges">Save</MudButton>
        <div style="flex-grow: 1;"></div>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CancelChanges">Cancel</MudButton>
    </MudCardActions>
    @if (_showAlert)
    {
        <MudAlert Severity=@_severity ShowCloseIcon="true" CloseIconClicked="() => _showAlert = false">@_message</MudAlert>
    }
</MudCard>

@code {
    [Parameter] public int Id { get; set; }

    Reservation _reservationToEdit = new();
    private DateRange _dateRange = new();

    private bool _showAlert;
    private Severity _severity = Severity.Info;
    private string _message = "Your alert message goes here.";

    protected override Task OnInitializedAsync()
    {
        _reservationToEdit = ReservationService.CreateReservationQuery().WhereId(Id).WithRooms().ToListAsync().Result.First();
        _dateRange.Start = _reservationToEdit.StartDate;
        _dateRange.End = _reservationToEdit.EndDate;
        return base.OnInitializedAsync();
    }

    private async void DatePickerClosed()
    {
        // Check if rooms are available at the given dates. 
        var collidingReservations = await ReservationService.ReservationsForAnyOfRoomsInDateRange(
            _reservationToEdit.RoomReservations.Select(rr => rr.Room).ToList(),
            _dateRange.Start ?? _reservationToEdit.StartDate,
            _dateRange.End ?? _reservationToEdit.EndDate).ToListAsync();
        collidingReservations = collidingReservations.Where(r => r.Id != _reservationToEdit.Id).ToList(); // Remove current reservation from the list

        // If not, show alert
        if (collidingReservations.Count > 0)
        {
            var collidingRoomNames = string.Join(", ", collidingReservations.SelectMany(r => r.RoomReservations.Select(rr => rr.Room.Name)).Distinct().ToList());
            ShowAlert(Severity.Error, $"Room '{collidingRoomNames}' is not available at the given dates");
            return;
        }

        // If rooms are available, update the reservation dates
        _reservationToEdit.StartDate = _dateRange.Start ?? _reservationToEdit.StartDate;
        _reservationToEdit.EndDate = _dateRange.End ?? _reservationToEdit.EndDate;
    }

    private async void SaveChanges()
    {
        var wasSuccessful = await ReservationService.UpdateReservationAsync(_reservationToEdit);

        if (!wasSuccessful)
        {
            // Show error alert
            ShowAlert(Severity.Error, "An error occured while updating the reservation");
            return;
        }

        // Show success alert
        ShowAlert(Severity.Success, "Reservation updated successfully");
    }

    private async void CancelChanges()
    {
        // Navigate to previous page user was on using JS
        await JsRuntime.InvokeVoidAsync("history.back");
    }

    private void HideAlert()
    {
        _showAlert = false;
    }

    private void ShowAlert(Severity severity, string message)
    {
        _severity = severity;
        _message = message;
        _showAlert = true;
    }

}