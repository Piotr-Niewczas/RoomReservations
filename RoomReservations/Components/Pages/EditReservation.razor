@page "/edit-reservation/{id:int}"
@using RoomReservations.Data
@using RoomReservations.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@inject IReservationService ReservationService
@inject SharedMethodsService SharedMethodsService
@inject ITransactionService TransactionService
@attribute [Authorize]

@if (!_showForm)
{
    <MudText Typo="Typo.h2">Coś poszło nie tak.</MudText>
    <MudAlert Severity="Severity.Error">@_formLoadError</MudAlert>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="SharedMethodsService.GoBackAsync">Wróć</MudButton>
    return;
}

<MudCard Style="max-width: 1000px">
    <MudCardContent Style="position: relative;">
        <MudOverlay Visible="_isDeletedOverlayVisible" Style="background-color: rgba(0, 0, 0, 0.5) !important" Absolute="true">
            <MudPaper Class="pa-16 ma-2" Elevation="3">
                <MudText Typo="Typo.h4">Rezerwacja usunięta</MudText>
                <MudText>
                    Kwota rezerwacji w wysokości
                    @_amountAlreadyPaid zł
                    zostanie zwrócona na konto.
                </MudText>
            </MudPaper>
        </MudOverlay>
        <MudOverlay Visible="_isPaymentOverlayVisible" Style="background-color: rgba(0, 0, 0, 0.5) !important" Absolute="true">
            <MudPaper Class="pa-16 ma-2" Elevation="3">
                @if (_transaction is not null)
                {
                    @if (_isTransactionCompleted)
                    {
                        <MudText Color="Color.Success" Typo="Typo.h4">Zapłacono</MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.h4">@(_transaction.Amount > 0 ? "Wymagana dopłata" : "") </MudText>
                        <PaymentWindow Amount="@_transaction.Amount" TransactionIds="@( [_transaction.Id])"
                                       IsCompleted="_isTransactionCompleted">
                        </PaymentWindow>
                    }
                }
            </MudPaper>
        </MudOverlay>
        <MudText Typo="Typo.h6">Edytuj rezerwację</MudText>
        <MudText>ID rezerwacji: @_reservationToEdit.Id</MudText>
        <MudText>Email klienta: @_reservationToEdit.User.UserName </MudText>

        <div style="padding-top: 2em">
            @if (_onlyEditEndDateForward)
            {
                <MudGrid>
                    <MudItem xs="6">
                        <div style="position: relative; top: 50%; transform: translateY(-50%);">
                            <MudText>Data rozpoczęcia rezerwacji: @_dateRange.Start?.ToString("dd.MM.yyyy")</MudText>
                        </div>
                    </MudItem>
                    <MudItem xs="6">
                        <MudDatePicker Label="Data zakończenia: " @bind-Date="_dateRange.End"
                                       MinDate="@_originalEndDate" MaxDate="@_lastAvailableDate"
                                       PickerClosed="DatePickerClosed" ReadOnly="@(!_reservationToEdit.IsPaid)"
                                       HelperText="@(_reservationToEdit.IsPaid ? "" : "Rezerwacja nie jest opłacona, więc nie możesz jej wydłużyć")"/>
                    </MudItem>
                </MudGrid>
            }
            else
            {
                <MudDateRangePicker Label="Zmień datę rezerwacji" @bind-DateRange="_dateRange" PickerClosed="DatePickerClosed"
                                    MinDate="@(_isUserReceptionist ? DateTime.Now.AddDays(-1) : _firstAvailableDate)"
                                    MaxDate="@(_isUserReceptionist ? null : _lastAvailableDate)"
                                    IsDateDisabledFunc="@(_isUserReceptionist ? IsDateAvailable : null)"
                                    PickerVariant="PickerVariant.Static" Orientation="Orientation.Landscape"/>
            }
        </div>

        <div style="padding-top: 2em">
            <MudText>Pokoje:</MudText>
            @foreach (var rr in _reservationToEdit.RoomReservations)
            {
                <MudText>"@rr.Room.Name"</MudText>
            }
        </div>

        <div style="padding-top: 2em;">
            <MudText>Zapłacono: @_amountAlreadyPaid zł</MudText>
            <MudText>Koszt po edycji: @_amountAfterEdit zł</MudText>
            <MudText>
                <b>Różnica do zapłaty: @(_amountAfterEdit - _amountAlreadyPaid) zł</b>
            </MudText>
        </div>
    </MudCardContent>
    <MudCardActions>
        <MudGrid Spacing="10" Justify="Justify.Center">
            <MudItem>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(_isDataIncorrect || _isDeletedOverlayVisible)" OnClick="SaveChanges">Zapisz</MudButton>
            </MudItem>

            <MudItem>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Disabled="@_isDeletedOverlayVisible" OnClick="DeleteReservation">Odwołaj rezerwację</MudButton>
            </MudItem>

            <MudItem>
                <MudButton Variant="Variant.Filled" Color="@(_isDeletedOverlayVisible ? Color.Primary : Color.Default)" OnClick="SharedMethodsService.GoBackAsync">Wróć</MudButton>
            </MudItem>
        </MudGrid>
    </MudCardActions>
    <Alert @ref="_alert"></Alert>
</MudCard>

@code {
    [Parameter] [EditorRequired] public int Id { get; set; }
    Reservation _reservationToEdit = new();
    private DateRange _dateRange = new();

    private Alert _alert = new();
    private bool _isDataIncorrect = true;
    private bool _showForm;
    private string _formLoadError = "Wystąpił nieznany błąd";
    private bool _isDeletedOverlayVisible;
    private bool _isUserReceptionist;

    private Transaction? _transaction;
    private decimal _amountAlreadyPaid;
    private decimal _amountAfterEdit;
    private bool _isPaymentOverlayVisible;
#pragma warning disable 0649
    private bool _isTransactionCompleted; // IT IS ASSIGNED TO 
#pragma warning restore 0649

    private bool _onlyEditEndDateForward;
    private DateTime _originalEndDate;
    private DateTime _firstAvailableDate;
    private DateTime _lastAvailableDate;

    private IEnumerable<Reservation>? _reservationsForRooms;

    protected override async Task OnInitializedAsync()
    {
        // please note that we cannot use _alert.ShowAlert() here because it is not yet initialized

        var reservationsFromDb = await ReservationService.CreateReservationQuery().WhereId(Id).WithRooms().WithTransactions().ToListAsync();
        if (reservationsFromDb.Count != 1)
        {
            _formLoadError = "Rezerwacja o podanym ID nie istnieje";
            return;
        }

        _reservationToEdit = reservationsFromDb.FirstOrDefault()!; // We know there is one element in the list

        var (user, error) = await SharedMethodsService.GetCurrentUserAsync();

        if (user is null)
        {
            _formLoadError = error == GetCurrentUserError.UserNotLoggedIn ? "Zaloguj się, aby edytować rezerwacje" : "Wystąpił nieznany błąd";
            return;
        }

        _isUserReceptionist = await SharedMethodsService.IsCurrentUserInRoleAsync(RoleNames.Receptionist);
        // Check if user is the owner of the reservation or is a receptionist
        if (_reservationToEdit.User == user || _isUserReceptionist)
        {
            _dateRange.Start = _reservationToEdit.StartDate;
            _dateRange.End = _reservationToEdit.EndDate;
            _showForm = true;
        }
        else
        {
            _reservationToEdit = new Reservation(); // Clear the reservation
            _formLoadError = "Ta rezerwacja nie należy do Ciebie";
            return;
        }

        _amountAlreadyPaid = TransactionService.GetTotalPaidForReservation(_reservationToEdit, true);
        RecalculateTotalPrice();

        // If user is not a receptionist and the reservation starts in less than 7 days
        if (!_isUserReceptionist && _reservationToEdit.StartDate < DateTime.Now.AddDays(7))
        {
            _onlyEditEndDateForward = true;
            _originalEndDate = _reservationToEdit.EndDate;
        }

        if (!_isUserReceptionist)
        {
            _firstAvailableDate = await FirstAvailableDateForRooms();
            // if date is in the past, change to current one
            if (_firstAvailableDate < DateTime.Now.AddDays(-1))
            {
                _firstAvailableDate = DateTime.Now.AddDays(-1);
            }

            _lastAvailableDate = await LastAvailableDateForRooms();
        }
    }

    private async void DatePickerClosed()
    {
        // Check if rooms are available at the given dates. Remove current reservation from the list.
        var collidingReservations = await ReservationService.ReservationsForAnyOfRoomsInDateRange(
                _reservationToEdit.RoomReservations.Select(rr => rr.Room).ToList(),
                _dateRange.Start ?? _reservationToEdit.StartDate,
                _dateRange.End ?? _reservationToEdit.EndDate)
            .Where(r => r.Id != _reservationToEdit.Id).ToListAsync();


        // If not, show alert
        if (collidingReservations.Count > 0)
        {
            _isDataIncorrect = true;
            var collidingRoomNames = string.Join(", ", collidingReservations.SelectMany(r => r.RoomReservations.Select(rr => rr.Room.Name)).Distinct().ToList());
            _alert.ShowAlert(Severity.Error, $"Pokój '{collidingRoomNames}' nie jest dostępny w podanym terminie");
            return;
        }

        // If rooms are available, update the reservation dates
        _reservationToEdit.StartDate = _dateRange.Start ?? _reservationToEdit.StartDate;
        _reservationToEdit.EndDate = _dateRange.End ?? _reservationToEdit.EndDate;

        _isDataIncorrect = false;
        RecalculateTotalPrice();
    }

    private async Task SaveChanges()
    {
        var wasSuccessful = await ReservationService.UpdateReservationAsync(_reservationToEdit);

        if (!wasSuccessful)
        {
            // Show error alert
            _alert.ShowAlert(Severity.Error, "Wystąpił błąd podczas aktualizacji rezerwacji");
            return;
        }

        // Show success alert
        _alert.ShowAlert(Severity.Success, "Zaktualizowano rezerwację pomyślnie");
        _isDataIncorrect = true; // Disable save button

        // Check if need to create a transaction
        if (_amountAfterEdit != _amountAlreadyPaid)
        {
            _transaction = await TransactionService.CreateAdjustmentTransactionAsync(_reservationToEdit, _amountAfterEdit);
            _isPaymentOverlayVisible = true;
        }
    }

    private async Task DeleteReservation()
    {
        _transaction = await TransactionService.CreateAdjustmentTransactionAsync(_reservationToEdit, 0);
        var result = await ReservationService.DeleteReservationAsync(_reservationToEdit.Id);
        if (result)
        {
            _isDeletedOverlayVisible = true;
        }
        else _alert.ShowAlert(Severity.Error, "Nie udało się usunąć rezerwacji");
    }

    private void RecalculateTotalPrice()
    {
        _amountAfterEdit = 0;
        var stayLength = Math.Ceiling((_dateRange.End - _dateRange.Start)?.TotalDays ?? -1);
        foreach (var room in _reservationToEdit.RoomReservations.Select(rr => rr.Room))
        {
            _amountAfterEdit += room.PricePerNight * (decimal)stayLength;
        }
    }

    private IQueryable<Reservation> ReservationsContainingAnyOfRoomsButNotThisOne()
    {
        return ReservationService.AllReservationsForAnyOfRooms(_reservationToEdit.RoomReservations.Select(rr => rr.Room).ToList())
            .Where(r => r.Id != _reservationToEdit.Id);
    }

    private async Task<DateTime> FirstAvailableDateForRooms()
    {
        var reservationBeforeThis = await ReservationsContainingAnyOfRoomsButNotThisOne()
            // Get all reservations that end before the current reservation starts
            .Where(r => r.EndDate <= _reservationToEdit.StartDate)
            // Order by end date
            .OrderBy(r => r.EndDate)
            // Get the first one
            .FirstOrDefaultAsync();

        // If there is no reservation after this one, return the min date,
        // otherwise return the end date of the next reservation
        return reservationBeforeThis?.EndDate.AddDays(1) ?? DateTime.MinValue;
    }

    private async Task<DateTime> LastAvailableDateForRooms()
    {
        var reservationAfterThis = await ReservationsContainingAnyOfRoomsButNotThisOne()
            // Get all reservations that start after the current reservation ends
            .Where(r => r.StartDate >= _reservationToEdit.EndDate)
            // Order by start date
            .OrderBy(r => r.StartDate)
            // Get the first one
            .FirstOrDefaultAsync();

        // If there is no reservation after this one, return the max date,
        // otherwise return the start date of the next reservation
        return reservationAfterThis?.StartDate.AddDays(-1) ?? DateTime.MaxValue;
    }

    private bool IsDateAvailable(DateTime date)
    {
        _reservationsForRooms ??= ReservationsContainingAnyOfRoomsButNotThisOne().ToList();

        return !_reservationsForRooms.All(r => r.StartDate > date || r.EndDate < date);
    }

}

@* ReSharper restore UnassignedField.Compiler *@