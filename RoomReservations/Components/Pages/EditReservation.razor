@page "/edit-reservation/{id:int}"
@using RoomReservations.Data
@inject IReservationService ReservationService
@using RoomReservations.Models

<h3>EditReservation</h3>

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6">Edit Reservation</MudText>
        <MudText>Reservation ID: @ReservationToEdit.Id</MudText>
        <MudText>Customer Name: NYI </MudText>
        <MudDateRangePicker Label="Reservation Date Picker" @bind-DateRange="_dateRange" MinDate=@DateTime.Now PickerClosed="DatePickerClosed" />
        <MudText>Rooms:</MudText>
        @foreach (var rr in ReservationToEdit.RoomReservations)
        {
            <MudText>"@rr.Room.Name"</MudText>
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SaveChanges">Save</MudButton>
        <div style="flex-grow: 1;"></div>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="CancelChanges">Cancel</MudButton>
    </MudCardActions>
    @if (showAlert)
    {
        <MudAlert Severity=@severity ShowCloseIcon="true" CloseIconClicked="(() => showAlert = false)">@message</MudAlert>
    }
</MudCard>

@code {
    [Parameter] public int Id { get; set; }

    Reservation ReservationToEdit = new();
    private DateRange _dateRange = new ();

    private bool showAlert = false;
    private Severity severity = Severity.Info;
    private string message = "Your alert message goes here.";

    protected override Task OnInitializedAsync()
    {
        ReservationToEdit = ReservationService.CreateReservationQuery().WhereId(Id).WithRooms().ExecuteAsync().Result.First();
        _dateRange.Start = ReservationToEdit.StartDate;
        _dateRange.End = ReservationToEdit.EndDate;
        return base.OnInitializedAsync();
    }

    private async void DatePickerClosed()
    {
        // Check if rooms are available at the given dates. 
        List<Reservation> collidingReservations = await ReservationService.ReservationsForAnyOfRoomsInDateRange(
            ReservationToEdit.RoomReservations.Select(rr => rr.Room).ToList(),
            _dateRange.Start ?? ReservationToEdit.StartDate,
            _dateRange.End ?? ReservationToEdit.EndDate);
        collidingReservations = collidingReservations.Where(r => r.Id != ReservationToEdit.Id).ToList(); // Remove current reservation from the list

        // If not, show alert
        if (collidingReservations.Count > 0)
        {
            string collidingRoomNames = string.Join(", ", collidingReservations.SelectMany(r => r.RoomReservations.Select(rr => rr.Room.Name)).Distinct().ToList());
            ShowAlert(Severity.Error, $"Room '{collidingRoomNames}' is not available at the given dates");
            return;
        }

        // If rooms are available, update the reservation dates
        ReservationToEdit.StartDate = _dateRange.Start ?? ReservationToEdit.StartDate;
        ReservationToEdit.EndDate = _dateRange.End ?? ReservationToEdit.EndDate;
    }

    private async void SaveChanges()
    {
        bool wasSuccessful = await ReservationService.UpdateReservationAsync(ReservationToEdit);

        if (!wasSuccessful)
		{
			// Show error alert
			ShowAlert(Severity.Error, "An error occured while updating the reservation");
			return;
		}

        // Show success alert
		ShowAlert(Severity.Success, "Reservation updated successfully");
    }

    private void CancelChanges()
    {
        // Cancel changes logic here
    }

    private void HideAlert()
    {
        showAlert = false;
    }

    private void ShowAlert(Severity severity, string message)
    {
        this.severity = severity;
        this.message = message;
        showAlert = true;
    }
}
