@page "/edit-reservation/{id:int}"
@using RoomReservations.Data
@using RoomReservations.Models
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@inject IReservationService ReservationService
@inject SharedMethodsService SharedMethodsService
@attribute [Authorize]

@if (!_showForm)
{
    <MudText Typo="Typo.h2">Something went wrong.</MudText>
    <MudAlert Severity="Severity.Error">@_formLoadError</MudAlert>
    <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="SharedMethodsService.GoBackAsync">Go back</MudButton>
    return;
}

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6">Edit Reservation</MudText>
        <MudText>Reservation ID: @_reservationToEdit.Id</MudText>
        <MudText>Customer Name: @_reservationToEdit.User.UserName </MudText>
        <MudDateRangePicker Label="Reservation Date Picker" @bind-DateRange="_dateRange" MinDate="@DateTime.Now.AddDays(-1)" PickerClosed="DatePickerClosed"/>
        <MudText>Rooms:</MudText>
        @foreach (var rr in _reservationToEdit.RoomReservations)
        {
            <MudText>"@rr.Room.Name"</MudText>
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@_isDataIncorrect" OnClick="SaveChanges">Save</MudButton>
        <div style="flex-grow: 1;"></div>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="SharedMethodsService.GoBackAsync">Go back</MudButton>
    </MudCardActions>
    <Alert @ref="_alert"></Alert>
</MudCard>

@code {
    [Parameter] public int Id { get; set; }

    Reservation _reservationToEdit = new();
    private DateRange _dateRange = new();

    private Alert _alert = new();
    private bool _isDataIncorrect = true;
    private bool _showForm;
    private string _formLoadError = "Unknown error has occured";
    private bool _isUserReceptionist;

    protected override async Task OnInitializedAsync()
    {
        // please note that we cannot use _alert.ShowAlert() here because it is not yet initialized

        var reservationsFromDb = await ReservationService.CreateReservationQuery().WhereId(Id).WithRooms().ToListAsync();
        if (reservationsFromDb.Count != 1)
        {
            _formLoadError = "Reservation not found";
            return;
        }

        _reservationToEdit = reservationsFromDb.FirstOrDefault()!; // We know there is one element in the list

        var (user, error) = await SharedMethodsService.GetCurrentUserAsync();

        if (user is null)
        {
            _formLoadError = error == GetCurrentUserError.UserNotLoggedIn ? "Please log in to edit your reservation" : "Unknown error has occured";
            return;
        }

        _isUserReceptionist = await SharedMethodsService.IsCurrentUserInRoleAsync(RoleNames.Receptionist);
        // Check if user is the owner of the reservation or is a receptionist
        if (_reservationToEdit.User == user || _isUserReceptionist)
        {
            _dateRange.Start = _reservationToEdit.StartDate;
            _dateRange.End = _reservationToEdit.EndDate;
            _showForm = true;
        }
        else
        {
            _reservationToEdit = new Reservation(); // Clear the reservation
            _formLoadError = "This reservation does not belong to you!";
        }
    }

    private async void DatePickerClosed()
    {
        // Check if rooms are available at the given dates. Remove current reservation from the list.
        var collidingReservations = await ReservationService.ReservationsForAnyOfRoomsInDateRange(
                _reservationToEdit.RoomReservations.Select(rr => rr.Room).ToList(),
                _dateRange.Start ?? _reservationToEdit.StartDate,
                _dateRange.End ?? _reservationToEdit.EndDate)
            .Where(r => r.Id != _reservationToEdit.Id).ToListAsync();


        // If not, show alert
        if (collidingReservations.Count > 0)
        {
            _isDataIncorrect = true;
            var collidingRoomNames = string.Join(", ", collidingReservations.SelectMany(r => r.RoomReservations.Select(rr => rr.Room.Name)).Distinct().ToList());
            _alert.ShowAlert(Severity.Error, $"Room '{collidingRoomNames}' is not available at the given dates");
            return;
        }

        // If rooms are available, update the reservation dates
        _reservationToEdit.StartDate = _dateRange.Start ?? _reservationToEdit.StartDate;
        _reservationToEdit.EndDate = _dateRange.End ?? _reservationToEdit.EndDate;

        _isDataIncorrect = false;
    }

    private async void SaveChanges()
    {
        var wasSuccessful = await ReservationService.UpdateReservationAsync(_reservationToEdit);

        if (!wasSuccessful)
        {
            // Show error alert
            _alert.ShowAlert(Severity.Error, "An error occured while updating the reservation");
            return;
        }

        // Show success alert
        _alert.ShowAlert(Severity.Success, "Reservation updated successfully");
        _isDataIncorrect = true; // Disable save button
    }

}