@using RoomReservations.Models
@using RoomReservations.Data
@inject NavigationManager NavigationManager
@inject IReservationService ReservationService

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h6">Reservation Details</MudText>
        <MudText>Reservation ID: @ReservationToDisplay.Id</MudText>
        <MudText>Customer Name: NYI </MudText>
        <MudText>Reservation Date: @ReservationToDisplay.StartDate.ToString("dd.MM") - @ReservationToDisplay.EndDate.ToString("dd.MM.yyyy")</MudText>
        @foreach (var rr in ReservationToDisplay.RoomReservations)
        {
            <MudText>Room Name: @rr.Room.Name</MudText>
        }
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => NavigateToEditPage())">Edit</MudButton>
        <div style="flex-grow: 1;"></div>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="@(() => DeleteReservation())">Delete</MudButton>
    </MudCardActions>
    <Alert @ref="Alert"></Alert>
</MudCard>


@code {
    [Parameter] public Reservation ReservationToDisplay { get; set; } = new();
    private Alert Alert { get; set; } = new();

    private void NavigateToEditPage()
    {
        var url = "/edit-reservation/" + ReservationToDisplay.Id;
        NavigationManager.NavigateTo(url);
    }

    private async void DeleteReservation()
    {
        var result = await ReservationService.DeleteReservationAsync(ReservationToDisplay.Id);
        if (result) // If successful, refresh page
        {
            Alert.ShowAlert(Severity.Success, "Reservation deleted successfully.");
            await Task.Delay(2000);
            NavigationManager.NavigateTo(NavigationManager.Uri, true);
        }
        else Alert.ShowAlert(Severity.Error, "Could not delete reservation.");
    }

}