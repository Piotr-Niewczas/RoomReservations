@using RoomReservations.Data
@inject ITransactionService TransactionService

@if (!TransactionIds.Any() || Amount == decimal.MinValue)
{
    <MudText Color="Color.Error">Wystąpił błąd podczas ładowania strony!</MudText>
    return;
}

@if (Amount <= 0)
{
    <MudText Typo="Typo.h3">Otrzymasz zwrot</MudText>
    <MudText>W wysokości: @Amount zł</MudText>
}
else
{
    @if (IsCompleted)
    {
        <MudText Color="Color.Success" Typo="Typo.h5">Zapłacono</MudText>
    }
    else
    {
        <div class="d-flex gap-4">
            <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Pay">Zapłać teraz</MudButton>
            <MudText Typo="Typo.h6">Należność: @Amount zł</MudText>
        </div>
    }
}

@code {
    [Parameter] [EditorRequired] public decimal Amount { get; set; } = decimal.MinValue;
    [Parameter] [EditorRequired] public IEnumerable<int> TransactionIds { get; set; } = [];
    [Parameter] public EventCallback OnPaymentCompleted { get; set; }
    [Parameter] public bool IsCompleted { get; set; }

    private async Task Pay()
    {
        foreach (var tid in TransactionIds)
        {
            await TransactionService.PayTransactionAsync(tid);
        }

        IsCompleted = true;

        if (OnPaymentCompleted.HasDelegate)
        {
            await OnPaymentCompleted.InvokeAsync();
        }
    }

}